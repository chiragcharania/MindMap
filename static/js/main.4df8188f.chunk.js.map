{"version":3,"sources":["components/Graph.jsx","components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["Graph","_ref","data","onClickNode","bgColor","react_default","a","createElement","id","style","width","height","className","react_d3_tree_min_default","styles","nodes","node","circle","fill","name","fontFamily","fontSize","leafNode","collapsible","orientation","translate","x","document","getElementById","clientWidth","window","innerWidth","y","clientHeight","innerHeight","onClick","Sidebar","text","array","current","setCurrent","insert","Row","Col","md","value","onChange","e","target","placeholder","Button","variant","Node","this","left","right","App","_useState","useState","_useState2","Object","slicedToArray","_useState3","_useState4","display","_useState5","root","_useState6","setData","_useState7","_useState8","_useState9","_useState10","mindMapData","setMindMapData","traverse","obj","children","concat","toConsumableArray","String","length","Container","Header","components_Graph","res","keys","map","key","formatData","mindMap","parent","childNode","forEach","child","push","console","log","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4df8188f.chunk.js","sourcesContent":["import React from 'react';\r\nimport Tree from 'react-d3-tree';\r\n\r\nconst Graph = ({ data, onClickNode, bgColor }) => {\r\n  return (\r\n    <div id=\"treeWrapper\" style={{ width: '100%', height: '100%' }} className={bgColor} >\r\n      {\r\n        bgColor ?\r\n          (<span className=\"blackFont\">MindMap </span>)\r\n          :\r\n          (<span>Note: For best results, add nodes in the following order: F, C, I, B, D, G, J. </span>)\r\n      }\r\n      <Tree className=\"nodeFont\"\r\n        styles={{\r\n          nodes: {\r\n            node: {\r\n               \r\n              circle: {\r\n                fill: '#ffd303',\r\n                name: {\r\n                  fontFamily: `'Roboto', sans-serif`,\r\n                  fontSize: '2rem'\r\n                  \r\n                }\r\n              }\r\n            },\r\n            leafNode: {\r\n              circle: {\r\n                fill: '#90ee02',\r\n                name: {\r\n                  fontFamily: `'Roboto', sans-serif`,\r\n                  fontSize: '2rem'\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }}\r\n        collapsible={false}\r\n        orientation=\"vertical\"\r\n        translate={{\r\n          x: document.getElementById('treeWrapper')\r\n            ? document.getElementById('treeWrapper').clientWidth / 2\r\n            : window.innerWidth / 2,\r\n          y: document.getElementById('treeWrapper')\r\n            ? document.getElementById('treeWrapper').clientHeight / 4\r\n            : window.innerHeight / 4\r\n        }}\r\n        data={data}\r\n        onClick={onClickNode}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","import React from 'react';\r\nimport { Button, Row, Col } from 'react-bootstrap';\r\nconst Sidebar = ({ text, array, current, setCurrent, insert, data }) => {\r\n  return (\r\n    <div className=\"blue-bg\">\r\n      <Row>\r\n        <Col md=\"2\">\r\n          <input\r\n            className=\"next-node-input width-100\"\r\n            name=\"current\"\r\n            value={current}\r\n            onChange={e => setCurrent(e.target.value)}\r\n            placeholder=\"Enter the value\"\r\n          />\r\n        </Col>\r\n        <Col md=\"10\">\r\n          <Button variant=\"warning\" onClick={() => { insert(current); setCurrent('') }}>\r\n            Add Node\r\n        </Button>\r\n        </Col>\r\n      </Row>\r\n\r\n\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Row, Col, Container } from 'react-bootstrap';\r\n\r\n\r\nimport Graph from './components/Graph';\r\nimport Header from './components/Header';\r\n\r\nfunction Node(value) {\r\n  this.value = value;\r\n  this.left = null;\r\n  this.right = null;\r\n}\r\n\r\nfunction App() {\r\n  const [current, setCurrent] = useState('');\r\n  const [display, setdisplay] = useState([]);\r\n  const [data, setData] = useState({ root: null });\r\n  const [text, setText] = useState();\r\n  const [mindMapData, setMindMapData] = useState('');\r\n  const array = [];\r\n  //Tree traversal function\r\n  function traverse(obj) {\r\n    if (!obj) return null;\r\n\r\n    if (obj.left) {\r\n      traverse(obj.left);\r\n    }\r\n\r\n    if (obj.value) {\r\n      let children = [];\r\n\r\n      if (obj.left) {\r\n        children = [...children, traverse(obj.left)];\r\n      }\r\n\r\n      if (obj.right) {\r\n        children = [...children, traverse(obj.right)];\r\n      }\r\n\r\n      return {\r\n        name: String(obj.value),\r\n        children: children.length && [traverse(obj.left)].length ? children : []\r\n      };\r\n    }\r\n\r\n    if (obj.right) {\r\n      traverse(obj.right);\r\n    }\r\n  }\r\n\r\n  const formatData = data => {\r\n    const res = Object.keys(data).map(key => {\r\n      return {\r\n        name: data[key] && data[key].value ? String(data[key].value) : key,\r\n        children: traverse(data.root) ? [traverse(data.root)] : null\r\n      };\r\n    });\r\n\r\n    if (res[0].children) {\r\n      return res[0].children;\r\n    }\r\n\r\n    return res;\r\n  };\r\n\r\n  //Inserting a node in the tree\r\n  const insert = value => {\r\n    let node = new Node(value);\r\n    // Set this node to the root value\r\n    if (!data.root) setData({ root: node });\r\n    else {\r\n      let current = data.root;\r\n      while (!!current) {\r\n        if (node.value < current.value) {\r\n          if (!current.left) {\r\n            current.left = node;\r\n            break;\r\n          }\r\n          current = current.left;\r\n        } else if (node.value > current.value) {\r\n          if (!current.right) {\r\n            current.right = node;\r\n            break;\r\n          }\r\n          current = current.right;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return data;\r\n  };\r\n\r\n  const createMindMap = (obj) => {\r\n    let mindMap;\r\n    //check whether parent there or not\r\n    //parent is present\r\n    if (obj.parent) {\r\n      let childNode = [];\r\n      if (obj.children) {\r\n        obj.children.forEach(child => {\r\n          childNode.push({ name: child.name });\r\n        });\r\n      }\r\n      mindMap = {\r\n        name: obj.parent.name,\r\n        children: [{\r\n          name: obj.name,\r\n          children: childNode\r\n        }]\r\n      }\r\n\r\n    }\r\n    // if no parent\r\n    else {\r\n      let childNode = [];\r\n      if (obj.children) {\r\n        obj.children.forEach(child => {\r\n          childNode.push({ name: child.name });\r\n        });\r\n      }\r\n      mindMap = {\r\n        name: obj.name,\r\n        children: childNode\r\n      }\r\n\r\n\r\n    }\r\n    setMindMapData(mindMap);\r\n    console.log(\"Now, \", mindMapData);\r\n  }\r\n\r\n\r\n  return (\r\n    <main className=\"App\">\r\n      <Container className=\"container-fullSize\">\r\n        <Row>\r\n          <Header\r\n            current={current}\r\n            setCurrent={setCurrent}\r\n            insert={insert}\r\n            data={data}\r\n            array={display}\r\n            text={text}\r\n          /></Row>\r\n        <Row className=\"purple-bg nodeFont\">\r\n          <Col className=\"height-100 width-100 remove-padding\">\r\n            <Graph data={formatData(data)} onClickNode={createMindMap} />\r\n          </Col>\r\n          <Col className=\"height-100 width-100 remove-padding\">\r\n            {mindMapData ? (<Graph data={mindMapData} bgColor=\"teal-bg\" />) : null}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}